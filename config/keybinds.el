;; Hydra keybinds
(use-package hydra
  :ensure t)

(defhydra hydra-resize (global-map "C-SPC")
    "Resize windows."
    ("h" shrink-window-horizontally "shrink-h")
    ("j" shrink-window "shrink-v")
    ("k" enlarge-window "enlarge-v")
    ("l" enlarge-window-horizontally "enlarge-h")
    ("q" nil "quit" :exit t))

;; Some custom functions for meow
(use-package meow :ensure t)
(defun meow-beginning-of-line ()
  "Shortcut to go to the beginning of a line."
  (interactive)
  (meow-beginning-of-thing '?l))

(defun meow-end-of-line ()
  "Shortcut to go to the end of a line."
  (interactive)
  (meow-end-of-thing '?l))

;; meow keymap
(defun meow-setup ()
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
  (meow-motion-overwrite-define-key
   '("j" . meow-next)
   '("k" . meow-prev)
   '("<escape>" . ignore))
  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" . "H-j")
   '("k" . "H-k")
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet)
   ; isearch
   '("s" . "C-s")
   ; find-file
   '("f" . "C-x C-f")
   ; Window and buffer management
   '("w" . kill-buffer)
   '("d" . next-window-any-frame)
   '("e" . previous-window-any-frame)
   '("q" . delete-window)
   '("Q" . kill-buffer-and-window))
  (meow-motion-overwrite-define-key
   '(":" . "M-x")
   '("M-e" . next-buffer)
   '("M-q" . previous-buffer)
   '("M-d" . next-window-any-frame)
   '("M-a" . previous-window-any-frame)
   '("M-]" . next-buffer)
   '("M-[" . previous-buffer)
   '("M-l" . next-window-any-frame)  ;; originally downcase-word
   '("M-h" . previous-window-any-frame))  ;; originally mark-paragraph
  (meow-normal-define-key
   ;; Alt modifier binds
   '("M-e" . next-buffer)
   '("M-q" . previous-buffer)
   '("M-d" . next-window-any-frame)
   '("M-a" . previous-window-any-frame)
   '("(" . scroll-down-command)
   '(")" . scroll-up-command)
   '("M-]" . next-buffer)
   '("M-[" . previous-buffer)
   '("M-l" . next-window-any-frame)  ;; originally downcase-word
   '("M-h" . previous-window-any-frame)  ;; originally mark-paragraph
   '("M-f" . window-swap-states)  ;; originally forward-word
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '("_" . meow-beginning-of-line)
   '("$" . meow-end-of-line)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("d" . meow-delete)
   '("D" . meow-backward-delete)
   '("e" . meow-next-word)
   '("E" . meow-next-symbol)
   '("f" . meow-find)
   '("g" . meow-cancel-selection)
   '("G" . meow-grab)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("m" . meow-join)
   '("n" . meow-search)
   '("o" . meow-block)
   '("O" . meow-to-block)
   '("p" . meow-yank)
   '("q" . meow-quit)
   '("Q" . meow-goto-line)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("s" . meow-kill)
   '("t" . meow-till)
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)
   '("v" . meow-visit)
   '("w" . meow-mark-word)
   '("W" . meow-mark-symbol)
   '("x" . meow-line)
   '("X" . meow-goto-line)
   '("y" . meow-save)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("'" . repeat)
   '(":" . "M-x")
   '("<escape>" . ignore)))
;; (require 'meow)
(meow-setup)
(meow-global-mode 1)
