* Simple Emacs flake

a simple emacs flake using [[https://github.com/nix-community/emacs-overlay][emacs-overlay]]

** Adding external packages

#+BEGIN_SRC nix
  emacs-wrapped = with pkgs; symlinkJoin {
    name = "emacs";
    buildInputs = [ makeWrapper ];
    paths = [ emacs-unwrapped ];
    postBuild = let 
    path = [
      ## Add your external packages here ##
      fzf
      ripgrep
      ...
    ];
    ...
  };
#+END_SRC

** Adding/editing config files

- Config files should be placed in =./config/=.
- Config files will be read by Nix, and used to build the init file:
  #+begin_src nix
    emacs-unwrapped = pkgs.emacsWithPackagesFromUsePackage {
      defaultInitFile = true;
      config = pkgs.writeTextFile {
        name = "emacs-config.el";

        # Add a config file by performing builtins.readFile on your config file here
        
        text = (builtins.readFile ./config/init.el) 
             + (builtins.readFile ./config/packages.el);
      };
  #+end_src

** Adding emacs packages
- Packages are added either by adding them in epkgs.nix, or through use-package in an elisp file.
- You can set ~alwaysEnsure~ to true in ~flake.nix~, so ~:ensure t~ will not needed to be explicitly set in your config.
  - If you do this, make sure you set ~use-package-always-ensure~  tot ~t~ somewhere in your config.
  
  - Ex.
    #+begin_src nix
      epkgs: with epkgs; [
        ### Add your emacs packages here ###
        treesit-grammars.with-all-grammars
        ...
      ];
    #+end_src
    ... or ...
    #+BEGIN_SRC elisp
      (use-package magit
        :custom
        (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
    #+END_SRC
    
- Packages are not added directly through use-package; the config is parsed with Nix first, and Nix will download the packages.
  - Nix does not support parsing unicode characters, so make sure not to have any in your elisp config files.

